14:16
load("C:/Users/lasse/Dropbox/Uni Mannheim/M.Sc/4. Semester/Masterarbeit/Coding/.RData")
list(stanfit_model0,stanfit_model1)
list(stanfit_model0,stanfit_model1)[1]
as.matrix(list(stanfit_model0,stanfit_model1)[1])
colMeans(list(stanfit_model0,stanfit_model1)[1])
typeof(list(stanfit_model0,stanfit_model1)[1])
matrix(list(stanfit_model0,stanfit_model1)[1])
matrix(unlist(list(stanfit_model0,stanfit_model1)[1]))
typeof(stanfit_model0)
new("a", x = c(stanfit_model0,stanfit_model1))
new("A", x = c(stanfit_model0,stanfit_model1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
print(as.matrix(stanfits[1]))
for (i in 1:length(stanfits)){
# prepare rstan output
fit_matrix <- as.matrix(stanfits[i])
stanfits[i]
#fit_means <- colMeans(fit_matrix)
# write parameter estimates in matrix
#parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
save_parameter_estimates(1, list(as.matrix(stanfit_model0),stanfit_model1),
c(parameter_estimates_m0, parameter_estimates_m1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
print(stanfits[1])
for (i in 1:length(stanfits)){
# prepare rstan output
fit_matrix <- as.matrix(stanfits[i])
stanfits[i]
#fit_means <- colMeans(fit_matrix)
# write parameter estimates in matrix
#parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
save_parameter_estimates(1, list(as.matrix(stanfit_model0),stanfit_model1),
c(parameter_estimates_m0, parameter_estimates_m1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
print(stanfits[1])
for (i in 1:length(stanfits)){
# prepare rstan output
fit_matrix <- as.matrix(stanfits[i])
stanfits[i]
#fit_means <- colMeans(fit_matrix)
# write parameter estimates in matrix
#parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
stanfit_matrix0 <- as.matrix(stanfit_model0)
stanfit_matrix1 <- as.matrix(stanfit_model1)
save_parameter_estimates(1, list(stanfit_matrix0,stanfit_matrix1),
c(parameter_estimates_m0, parameter_estimates_m1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
for (i in 1:length(stanfits)){
# prepare rstan output
fit_matrix <- as.matrix(stanfits[i])
fit_means <- colMeans(fit_matrix)
# write parameter estimates in matrix
parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
stanfit_matrix0 <- as.matrix(stanfit_model0)
stanfit_matrix1 <- as.matrix(stanfit_model1)
save_parameter_estimates(1, list(stanfit_matrix0,stanfit_matrix1),
c(parameter_estimates_m0, parameter_estimates_m1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
for (i in 1:length(stanfits)){
# prepare rstan output
fit_means <- colMeans(stanfits[i])
# write parameter estimates in matrix
parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
stanfit_matrix0 <- as.matrix(stanfit_model0)
stanfit_matrix1 <- as.matrix(stanfit_model1)
save_parameter_estimates(1, list(stanfit_matrix0,stanfit_matrix1),
c(parameter_estimates_m0, parameter_estimates_m1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
for (i in 1:length(stanfits)){
# prepare rstan output
fit_means <- colMeans(stanfits[[i]])
# write parameter estimates in matrix
parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
stanfit_matrix0 <- as.matrix(stanfit_model0)
stanfit_matrix1 <- as.matrix(stanfit_model1)
save_parameter_estimates(1, list(stanfit_matrix0,stanfit_matrix1),
c(parameter_estimates_m0, parameter_estimates_m1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
for (i in 1:length(stanfits)){
# prepare rstan output
fit_means <- colMeans(stanfits[[i]])
print(fit_means)
# write parameter estimates in matrix
parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
stanfit_matrix0 <- as.matrix(stanfit_model0)
stanfit_matrix1 <- as.matrix(stanfit_model1)
save_parameter_estimates(1, list(stanfit_matrix0,stanfit_matrix1),
c(parameter_estimates_m0, parameter_estimates_m1))
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
for (i in 1:length(stanfits)){
# prepare rstan output
fit_means <- colMeans(stanfits[[i]])
# write parameter estimates in matrix
parameter_estimates[i][row,1] <- mean(fit_means[2:54])
}
return()
}
# TEMPORARY: TEST FUNCTION
stanfit_matrix0 <- as.matrix(stanfit_model0)
stanfit_matrix1 <- as.matrix(stanfit_model1)
save_parameter_estimates(1, list(stanfit_matrix0,stanfit_matrix1),
list(parameter_estimates_m0, parameter_estimates_m1))
list(parameter_estimates_m0, parameter_estimates_m1)[1]
list(parameter_estimates_m0, parameter_estimates_m1)[1][1,1]
(list(parameter_estimates_m0, parameter_estimates_m1)[1])[1,1]
parameter_estimates_m1[1,1]
parameter_estimates_m1
parameter_estimates_m1[1]
10%%2
10%%3
10%/%2
10.1%/%2.8
10.1%/%2.8
round(2.8888)
68/(186^2)
68/(1.86^2)
gl(2,3,4)
gl(2,3)
gl(10,3)
gl(3,5)
table(1:4)
table(1:4)[1]
3 < (4 < 5)
(4 < 5)
(4 < 5)+1
rep(1:3,5)
rep(1:3,5, each=10)
rep(1:3,5, each=2)
rep(1:3,5, each=1:3)
rep(1:3,1:5, each=2)
rep(1:3,times=1:5, each=2)
rep(1:3,times=(1:5), each=2)
rep(1:3,times=(1:3), each=2)
rep(1:3,times=(1:3))
seq(1:8)
seq(1:8:3)
seq(1:8,3)
seq(1,3)
seq(1,3,.6)
seq(1,3,length.out= 4)
seq(1,3,length.out= 10)
numeric(5)
numeric(5)
x <- numeric(3)
x
x[5] = 1
x
x %in% numeric(5)
x %in% numeric(50)
x %in% numeric(2)
x %in% numeric(1)
install.packages("knitr")
install.packages("knitr")
### d1
# 5 NAs in d1, 0 in others
sum(is.na(d1))
aggregate(time ~ group, d1, mean)
t.test(time ~ group, d1, var.equal = TRUE)
load("C:/Users/lasse/Dropbox/Uni Mannheim/M.Sc/4. Semester/R Kurs/KLAUSUR/exam_FSS2021_a.RData")
View(d1)
View(d2)
View(d3)
View(d4)
View(l)
### d2
plot(d2)
cor(d2)
### d3
plot(d3$x1,d3$y)
plot(d3$x2,d3$y)
plot(d3$x3,d3$y)
plot(d3$x4,d3$y)
cor(d3)
### d4
# Allgemein
# 20 junge, 20 mittelalte, 20 alte
# jeweils cue yes und cue no
# jeweils 10 DurchgÃ¤nge pro cue-Bedingung (20 pro vp)
agg_time <- aggregate(time ~ id + age.group + cue, d4, mean)
agg_corr <- aggregate(correct ~ id + age.group + cue, d4, mean)
plot(agg_corr$age.group,agg_corr$correct)
plot(agg_corr$age.group,agg_corr$correct)
plot(agg_time$age.group,agg_time$time)
plot(as.factor(agg_corr$cue),agg_corr$correct)
plot(as.factor(agg_time$cue),agg_time$time)
plot(as.factor(agg_corr$cue),agg_corr$correct)
plot(as.factor(agg_corr$cue),agg_corr$correct)
plot(agg_corr$id, agg_corr$correct)
plot(agg_time$id, agg_time$time)
### m
m
### v1
v1
mean(v1)
sd(v1)
rep(1:3,30)
rep(1:3,length.out=90)
length(rep(1:3,30))
library(tidyverse)
library(rstan)
library(bayesplot)
library(bridgesampling)
library(reticulate)
np <- import("numpy")
### Set working directory to be the folder above the one in which the script resides
setwd(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
### Utility functions
save_parameter_estimates <- function(row, stanfits, parameter_estimates){
# loops through model fits to save parameter estimates
for (j in 1:length(stanfits)){
# prepare rstan output
fit_means <- colMeans(stanfits[[j]])
# write parameter estimates in matrix
parameter_estimates[[j]][row,"dataset"] <- i
parameter_estimates[[j]][row,"true_model"] <- test_data_bf_true_indices[i]
# write theta estimates in matrix
# ugly since theta positions vary between model fit objects
theta_estimates <- fit_means[match(sprintf("theta[%s]", 1), names(fit_means))
:match(sprintf("theta[%s]", dim(test_data_bf_single)[1]), names(fit_means))]
parameter_estimates[[j]][row,"mean(theta)"] <- mean(theta_estimates)
parameter_estimates[[j]][row,"var(theta)"] <- var(theta_estimates)
# write other parameter estimates in matrix
parameter_estimates[[j]][row,"sigma2"] <- fit_means["sigma2"]
if ("mu" %in% colnames(parameter_estimates[[j]])){
parameter_estimates[[j]][row,"mu"] <- fit_means["mu"]
}
parameter_estimates[[j]][row,"tau2"] <- fit_means["tau2"]
}
return(parameter_estimates)
}
### Import test datasets
test_data_bf <- np$load("data/BF_approximation_comparison/test_data_bf.npy")
test_data_bf_true_indices <- np$load("data/BF_approximation_comparison/test_data_bf_true_indices.npy")
test_data_bf
